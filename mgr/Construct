#!/usr/bin/env perl
# $Id: Construct,v 1.184 2018/10/01 22:56:44 jeromel Exp $
use Env;
use lib qw(./mgr $STAR/mgr);#$ENV{ConstructLocation};           # Modify perl include path
use ConsDefs;

#my $xx=$ENV{ConstructLocation};
#print "Path used for ConsDefs is $xx\n" unless ($param::quiet);

if ( -e "mgr/Conscript-standard"){
    $xx = " local";
#    $param::defaultConscript =
#	"mgr/Conscript-standard";          # Local construction file.
} else {
    $xx = " default";
#    $param::defaultConscript =
#	$STAR . "/mgr/Conscript-standard"; # Default construction file.
}   
$param::defaultInclude = $INCLUDE; 
$param::defaultInclude =~ s|^#||; print "param::defaultInclude = $param::defaultInclude\n";

print "Repository used is $STAR\n"                         unless ($param::quiet);
print "Use$xx Conscript from $param::defaultConscript \n"  unless ($param::quiet);
print "Install includes\n"                                 unless ($param::quiet);

my $include = $param::defaultInclude; mkdir $include if ! -d $include;

if ( defined( $ARG{LinksCheck} ) ) {
  print "Clean up links. It takes a time.\n";
  my $build   = $BUILD; $build =~ s|^#||;
  &File::Find::find( \&wanted_dead, $build )   if -d $build;
  &File::Find::find( \&wanted_dead, $include ) if -d $include;
}
my $def = {@param::defaults};
{
  foreach my $key( sort keys %$def) {
    if ( defined( $ARG{$key} ) ) {
      print "Reset $key = $def->{$key} to $ARG{$key}\n" unless ($param::quiet);
      my @defs = ($key => $ARG{$key});
      push ( @param::defaults, @defs );
    }
  }
}

#
# Change directory structure depending on options
#
if ($def->{CXX}  =~ m/-Zoi/ ){
    # Drtup for INSURE tree directory.
    $LIB = $BUILD . "/ILIB";
    $BIN = $BUILD . "/IBIN";
    $OBJ = $BUILD . "/IOBJ";

} elsif ( defined($def->{GPROF}) ) {
    $LIB = $BUILD . "/GLIB";
    $BIN = $BUILD . "/GBIN";
    $OBJ = $BUILD . "/GOBJ";

} elsif ($def->{DEBUG}  eq "-g" ) {
    $LIB = $BUILD . "/lib";
    $BIN = $BUILD . "/bin";
    $OBJ = $BUILD . "/obj";

} else {
    $LIB = $BUILD . "/LIB";
    $BIN = $BUILD . "/BIN";
    $OBJ = $BUILD . "/OBJ";
}


$LIBPATH = $LIB;
$LIBPATH .= $main::PATH_SEPARATOR . $def->{Packages}->{ROOT}->{LIBDIR};
$LIBPATH .= $main::PATH_SEPARATOR . $def->{Packages}->{MYSQL}->{LIBDIR};
$LIBPATH .= $main::PATH_SEPARATOR . $def->{Packages}->{QT}->{LIBDIR};
$LIBPATH .= $main::PATH_SEPARATOR . $def->{ENV}->{OPTSTAR} . "/lib";
print "Set LIB = $LIB BIN = $BIN OBJ = $OBJ INCLUDE = $INCLUDE LIBPATH = $LIBPATH\n";

#if ( defined( $ARG{CPPPATH} ) ){$CPPPATH = $ARG{CPPPATH};}
#if ( defined( $ARG{FCPATH}  ) ){$FCPATH = $ARG{FCPATH};}
( my $DirPath = cwd() ) =~ s/\/$//g;
print "DirPath    = $DirPath\n" unless ($param::quiet);
$CWD = $DirPath;

$repository = `echo $STAR`;
chop($repository);
print "repository = $repository\n" unless ($param::quiet);
Repository($repository); 

my @Repo = Repository_List;
if ( defined( $ARG{Salt} ) ) { $Salt = $ARG{Salt}; }
if ( defined( $ARG{NoKeep} ) ) { $NoKeep = $ARG{NoKeep}; }

if ( $#Repo > -1 ) {
    print "Repositories:  \"@Repo\";" unless ($param::quiet);
    if ( !$Salt && !defined( $ARG{NoSalt} ) ) { $Salt = "user"; }
    if ($Salt) {
        Salt($Salt);
        print "\tSet Salt to \"$param::salt\"\n" unless ($param::quiet);
    }
}
else { if (! $NoKeep) {$param::keep = 1; }}


Link $OBJ => $DirPath;
print "Link $BUILD => $DirPath\n" unless ($param::quiet);
#  'FCPATH'         => $FCPATH,
#  'CPPPATH'        => $CPPPATH,
#  'EXTRA_CXXFLAGS' => $EXTRA_CXXFLAGS,
#  'EXTRA_CFLAGS'   => $EXTRA_CFLAGS,
$env = new cons(
  'LIBPATH'        => $LIBPATH,
);
Ignore qw(
  include/geant321/incbeg.inc
  include/geant231/incbeg.inc
  include/geant321/incend.inc
  include/math.h
  include/descrip.h
  include/fortran.h
  include/not_cern
  include/compiledata.h
  include/src/newsos.h
  include/src/sunos.h
  include/src/memtest.h
  include/TWin32HookViaThread.h
);

if ( !$param::quiet ) {
  my @list = qw (STAR_SYS ROOTSYS br 
		 CXX DEBUG CXXFLAGS EXTRA_CXXFLAGS 
		 CPPFLAGS EXTRA_CPPFLAGS br 
		 CPPPATH EXTRA_CPPPATH br
		 CC DEBUG CFLAGS EXTRA_CFLAGS br
		 FC FDEBUG FPPFLAGS FEXTEND FFLAGS br 
		 FCPATH EXTRA_FCPATH br
		 F77LD F77LDFLAGS br
		 CERNLIBS br 
		 FLIBS CLIBS SYSLIBS LIBG2C br
		 LD LDFLAGS EXTRA_LDFLAGS LIBPATH LIBS Libraries br
		 SO SOFLAGS br 
		 LIBG2C LIBSTDC br
		 ROOTLIBS br
		);
  my $tab = "";
  foreach my $p ( @list ) {
    if ($p eq 'br') {print "\n"; $tab = "";}
    else {
      if ($env->{$p})           {print "$tab$p = ", $env->{$p}; $tab = "\t";}
      elsif ($env->{ENV}->{$p}) {print "$tab$p = ", $env->{ENV}->{$p};  $tab = "\t";}
    }
  }
}
PrintHash($env,"\$env->{") if ($param::debug);
my @packages = ();
#find_PACKAGE(\&find_PACKAGE,"."); #print "Packages found: @packages\n";
my @subdirs = ();

# install includes
my @DirsWithIncludes = glob "asps/*/.includes_for_export.flg asps/*/*/.includes_for_export.flg StDb/*/.includes_for_export.flg StarVMC/*/.includes_for_export.flg StarVMC/*/*/.includes_for_export.flg OnlTools/*/.includes_for_export.flg OnlTools/*/*/.includes_for_export.flg StRoot/*/.includes_for_export.flg StRoot/*/*/.includes_for_export.flg StRoot/StRTSClient/include/.includes_for_export.flg  StRoot/RTS/src/RTS_READER/.includes_for_export.flg";
@DirsWithIncludes = map File::Basename::dirname($_), @DirsWithIncludes;

my @DirsIdlInc = glob "pams/*/idl pams/*/inc";
print "DirsWithIncludes = @DirsWithIncludes @DirsIdlInc\n" if ($param::debug);
foreach my $dir (@DirsWithIncludes, @DirsIdlInc) {
  print "---> looking for include in $dir\n" if ($param::debug);
  next if ! -r $dir;

  # Do not export StRoot/Table headers if ROOT_VERSION < 6
  next if ($dir =~ /StRoot\/Table$/ and $def->{ENV}->{ROOT_VERSION_MAJOR} < 6);

  opendir( DIR, $dir ) or die "Can't open $dir\n";
  my @incs = readdir DIR; print "incs = @incs\n" if ($param::debug);
  closedir DIR;
  my @incT = ();
  foreach my $inc(@incs) {
    next if $inc =~ /^\.\#/;
    if ( $inc =~ /\.h$/ || $inc =~ /\.hh$/
	 || $inc =~ /\.hpp$/ || $inc =~ /\.inc$/
	 || $inc =~ /\.idl$/ ) {
      push @incT, $dir . "/" . $inc;
      print "+++ add $inc from $dir\n" if ($param::debug);
    }
  }
  if ( $#incT > -1 && !$param::rflag ) {
    Install $env $INCLUDE, @incT;
  }
}
foreach my $dir (qw(StRoot/Vc/include/Vc StRoot/Vc/common  StRoot/Vc/scalar StRoot/Vc/sse StRoot/Vc/include/Vc/internal
		   StRoot/TBB/include/tbb StRoot/TBB/include/tbb/machine)) {
  next if ! -r $dir;
  my $installdir = $INCLUDE;
  if ($dir =~ /Vc/) {
    $installdir = $INCLUDE . "/Vc";
    if ($dir =~ /internal$/) {$installdir .= "/internal";}
    if ($dir =~ /common$/) {$installdir .= "/common";}
    if ($dir =~ /scalar$/) {$installdir .= "/scalar";}
    if ($dir =~ /sse$/)    {$installdir .= "/sse";}
  }
  if ($dir =~ /tbb/) {
    $installdir .= "/tbb";
    if ($dir =~ /machine$/) {$installdir .= "/machine";}
  }
  print "$dir => $installdir\n" if ($param::debug);
  opendir( DIR, $dir ) or die "Can't open $dir\n";
  my @incs = readdir DIR; print "incs = @incs\n" if ($param::debug);
  closedir DIR;
  my @incT = (); 
  foreach my $inc(@incs) {
    my $file = $dir . "/" . $inc;
    next if ! -f $file;
    next if $file =~ /\.consign/;
    push @incT, $dir . "/" . $inc;
    print "+++ add $inc from $dir\n" if ($param::debug);
  }  
  print "\n" if ($param::debug);
  print "$dir => $installdir @incT\n" if ($param::debug);
  if ( $#incT > -1 && !$param::rflag ) {
    Install $env $installdir, @incT;
  }
}
my @excludeDirList = qw(\. \.\. macros CVS html doc inc idl local run wrk example include kumac.*);
#my  $excludeDirList = "^(\.|\.\.|macros|CVS|html|doc|inc|idl|local|run|wrk|example|include|kumac.*)\$";
my  $excludeDirList = join ("|", @excludeDirList);
#
# Open exclusion list 
# Note: Please start new list with "|XX" to exclude XX
#   We should avoid having this list expanded - package not compiling should
#   simply not be checked out in dev or other areas. Only possible exception
#   are R&D packages which may requires a default exlcusion (unless +XX is
#   used) or a trigger on conditions (CXX version, compiler presence). In
#   such a case, those packages shouldbe stricly optional.
#
my  @items = qw(); #  StBTofPool StFgtPool
if ( 1==0 ){ # disable the exclusion
    if ($USE_64BITS and $USE_64BITS != "0"){
	push @items, "gstar";
	push @items, "control";
	push @items, "St_geant_Maker";
    }
}
#print "CXX MAJOR = $env->{CXX_MAJOR} CXX MINOR =  $env->{CXX_MINOR}\n";
#if ($env->{CXX_MAJOR} < 4 or ($env->{CXX_MAJOR} == 4 and $env->{CXX_MINOR} < 4)) {
#    $items .= "|Vc|TBB|TPCCATracker";
#}
if ($STAR_HOST_SYS =~ /sl61_gcc445/) {# broken Qt4
  push @items, "St_geom_Maker";
}
if ($STAR_SYS =~ /x86_darwin/) {
  push @items, "St_geom_Maker"; # if no QT |StStarLogger
  push @items, "GeoTestMaker"; # if no QT |StStarLogger
  push @items, "Pythia6"; # problem with pythia6_common_address.c
#ifdef ____MAC_____
  push @items, "StEStructPool";
  push @items, "StMCFilter";
  push @items, "StTriggerUtilities";
  push @items, "StSpinPool";
#endif /* ____MAC_____ */
}
#$items .= "StBTofPool|StTriggerUtilities|StFgtPool|StPeCMaker";
#$items .= "StBTofPool|StFgtPool|StPeCMaker";
# closing exclusion list
my $items = "";# print "items $#items  = @items\n";

if ( defined($SKIP_DIRS) ) {
  $items = join("|", split(" ", $SKIP_DIRS));
} else {
  $items = "StShadowMaker|PWGTools";
}

if ( $#items > -1){
  if (!$items) {$items  =       join("|",@items);}
  else         {$items .= "|" . join("|",@items);}
  print "SKIP_DIRS is now: $#items $items\n";
}
# Search for directories (one level down) and make
# list of targets
#
foreach my $dir( "pams", "StRoot", "StPiD", "StarVMC" ) {
  next if !-d $dir and !-l $dir;
  opendir( DIR, $dir ) or die "Can't open $dir\n";
  my @subdirS = readdir DIR;  print "subdirS = @subdirS\n" if ($param::debug);
  closedir DIR;
  foreach my $sub_dir (@subdirS) { 
    next if $sub_dir eq '.' || $sub_dir eq '..';
    next if ( $sub_dir =~ $excludeDirList);
    my $sub_Dir = $dir . "/" . $sub_dir; 
    next if !-d $sub_Dir and !-l $sub_Dir;

    # Do not build StRoot/Table if ROOT_VERSION < 6
    next if ($sub_Dir =~ m/StRoot\/Table$/ and $def->{ENV}->{ROOT_VERSION_MAJOR} < 6);

    print "dir = $dir \t sub_dir = $sub_dir sub_Dir = $sub_Dir\n" if ($param::debug);
#    print "$sub_dir => $items\n";
#      if ($items and $sub_dir =~ /$items/) {print "skip dir: $sub_dir \t=> $items\n"; next;}
    print "items = $items sub_dir = $sub_dir $param::include\n" if ($param::debug);
    if ($items and $sub_dir =~ /$items/ and ( ! $param::include or  $sub_dir !~ /$param::include/o )    ) { 
      print "====== param::include = $param::include $subsub_dir \n" if ($param::debug);
      if ($STAR_LEVEL !~ /\.dev/ and $STAR_LEVEL !~ /\.DEV/) {
	print  "skip ";
	printf("%40s","$sub_dir");
	printf("\tto build it you need to add %25s","+$sub_dir");
	print  " in cons command line\n";
      }
      next;
    }
    if ( ( $sub_dir =~ /^sim$/    ||
	   $sub_dir =~ /^gen$/    ||
	   $sub_dir =~ /Pool$/    ||
	   $sub_dir =~ /Generator$/ ||
	   $sub_dir =~ /StRTSClient$/) ){
      if ( $items && $subsub_dir =~ /$items/ ) {
	print "skip dir: $subsub_dir \t=> $items\n" if ($param::debug);
	next;
      }
      if ( $sub_dir =~ /^sim$/    ||
	   $sub_dir =~ /^gen$/) {
	push @subdirs, $sub_Dir;
      }
      opendir( DIR, $sub_Dir ) or die "Can't open $sub_Dir\n";
      my @subsubdirS = readdir DIR; print "subsubdirS = @subsubdirS\n" if ($param::debug);
      closedir DIR;
      
      foreach my $subsub_dir(@subsubdirS) {
	next if $sub_dir eq '.' || $sub_dir eq '..';
	if ( $subsub_dir =~ $excludeDirList) {
	  #print "=== Skipping $subsub_dir in $subsub_Dir\n";
	  print "-1- $subsub_dir is in excludeDirList\n" if ($param::debug);
	  next;
	}
	my $subsub_Dir = $sub_Dir . "/" . $subsub_dir;
	next if !-d $subsub_Dir and !-l $subsub_Dir;
	print "dir = $dir \t sub_dir = $sub_dir\tsub_Dir $sub_Dir\tsubsub_Dir $subsub_Dir\n" if ($param::debug);
	if ($items and $subsub_dir =~ /$items/ and
	    ( ! $param::include or  $subsub_dir !~ /$param::include/o )    ) {
	  print  "skip ";
	  printf("%40s","$sub_dir/$subsub_dir");
	  printf("\tto build it you need to add %25s","+$sub_dir/$subsub_dir");
	  print  " in cons command line\n";
	  next;
	}
	push @subdirs, $subsub_Dir;
	print "================== add $subsub_Dir\n"  if ($param::debug);
      }
    } else {
      push @subdirs, $sub_Dir;
      print "================== add $sub_Dir\n" if ($param::debug);
    }
  }
}
print "subdirs = @subdirs\n" if $param::debug;

if ( index($env->{EXTRA_CXXFLAGS}, "-Werror") != -1 ) {
  # Read regex expressions from the file into an array. The patterns are matched against the names
  # of source directories in order to disable compiler warnings
  open(warnoff_dirs_file, "mgr/warnoff_dirs.txt") or print "Warning: Can't open mgr/warnoff_dirs.txt\n";
  chomp(@warnoff_dirs = <warnoff_dirs_file>);
  close(warnoff_dirs_file);

  if (@warnoff_dirs) {
    print "Compiler warnings will be inhibited for directories matching the following patterns:\n";
    foreach $dir (@warnoff_dirs) {
      print "\t$dir\n";
    }
  }
}

my @Targets = ();

# List of targets
my @sysdirlist = qw(asps/Simulation/agetof 
		    asps/staf/sdd 
		    StDb 
		   );
if ($STAR_SYS !~ /x86_darwin/) {
  push @sysdirlist, "asps/DAQBrowser";
}

#
# TODO: This excludes the build of root4star, Geant etc ... under a 64bits target
#       Need investigation at some stage. 
#       A comment character before !($USE_64BITS and $USE_64BITS != "0") would reenable
#       compilation but other parts of this code excludes more directories.
#
#if ( 1==0 ){  # disable the exclusion 
#    if ( !($USE_64BITS and $USE_64BITS != "0") &&
     if (  $STAR_SYS !~ /x86_darwin/){
	push @sysdirlist, "asps/Simulation/geant321";
	push @sysdirlist, "asps/Simulation/gcalor";
	push @sysdirlist, "asps/rexe";
	push @sysdirlist, "asps/Simulation/starsim";
	if ($STAR_HOST_SYS !~ /sl61_gcc445/) { # broken Qt
	    push @sysdirlist, "OnlTools/OnlinePlots";
	    push @sysdirlist, "OnlTools/PDFUtil";
	    push @sysdirlist, "OnlTools/StOnlineDisplay";
	    push @sysdirlist, "OnlTools/Jevp";
	}
    }
#}

#print "sysdirlist = @sysdirlist \n subdirs = @subdirs\n";

@skip_dirs = split(/\|/, $items);

foreach $dir(@sysdirlist , @subdirs ) {
    if ( -d $dir or -l $dir ) {
#	next if $param::include && $dir !~ /$param::include/o;
#	next if $param::exclude && $dir =~ /$param::exclude/o;
        print "Add dir : $dir\n" if $param::debug;
        #push @Targets, $OBJ . "/" . $dir . "/Conscript";
        next if grep($dir =~ m/$_/, @skip_dirs);
        push @packages, $dir;
    }
}
#print "Packages $#packages : @packages\n";
@packages = sortu(@packages);
if ($STAR_SYS !~ /x86_darwin/) {# no qt on mac
 my $qtRoot = "QtRoot";
 #if ($param::include and $qtRoot =~ /$param::include/) {
  push @packages, $qtRoot if ( -d $qtRoot or -l $qtRoot);
}
#print "packages after $#packages : @packages\n";
print "BUILD  = $BUILD OBJ = $OBJ\n" unless ($param::quiet);
@Targets = map($OBJ . "/" . $_ . "/Conscript", @packages);
#@Targets = map('#' . $_ . "/Conscript", @packages);

if ($param::debug){
    print "Packages $#packages : @packages\n";
    print "Targets $#Targets   : @Targets\n" ;
}

$warnoff_dirs = \@warnoff_dirs;
Export qw( env CWD INCLUDE LIB BIN BUILD OBJ warnoff_dirs);
Default qw (   .  );

Depends $env $STAR . "/mgr/RootCint.pl", $env->{ENV}->{ROOTSYS} . "/bin/rootcint";



Build @Targets;
#if ($env->{Packages}->{ROOT}->{RLIBMAP}) {
#  # Create libraries map
  
#  my @L = Repository_List;
#  push @L, "."; 
  
#  my $glob = join (' ', map($_ . "/." . $STAR_HOST_SYS . "/lib/lib*.so",@L));# print "glob = $glob\n";
#  my @Libs = glob $glob; 
#  my @rootlibs = split ' ', $ROOTLIBS;
#  foreach my $l (@rootlibs) {$l = s/-l//; if ($l) {$l = $ROOTSYS . "/lib/lib" . $l . ".so"; push @Libs, $l;}}
#  push @Libs, $env->{ENV}->{OPTSTAR} . "/lib/liblog4cxx.so";
#  push @Libs, "/usr/lib/libmysqlclient.so"; #print "Libs = @Libs\n";
#  my $map = $BUILD . "/etc/STAR_LIB.map";
#  $map =~ s/^#//;
#  if (! -r $map)  {
#    print "$map does not exist. Try to create.\n";
#    Command $env [("#" . $map)], @Libs, qq(LibsDeps.pl %< > %>);
#  }
#  if ( -r $map) {
#    print "$map does exist. Try to use.\n";
#    open(IN,"$map") or die "Can't open $map";
#    my $line;
#    while ($line = <IN>) {
#      next if ! $line;
#      next if $line !~ /:/;
#      my @words = split ':', $line;# print "words |$words[0]| |$words[1]\n";
#      chomp($words[1]);
#      my $lib = File::Basename::basename($words[0]);
#      $env->{MAP}->{$lib} = $words[1];# print "lib =  $lib Deps = $env->{MAP}->{$lib} = $words[1]\n";
#    }
#    close (IN);
#  }
  
## rm ~/.rootmap; cat $STAR_LIB/*.map > ~/.rootmap
#}
#___________________________________________________________________________
sub script::wanted_dead {
    -l and not -e and print "bogus link: $File::Find::name \t--- remove it\n"
      and unlink($_);
}
#____________________________________________________________
sub script::PrintHash($$) {
  my $env = shift; # print "Call PrintHash\n";
  my $prefix = shift;
  foreach my $key ( sort keys %$env ) {
    if (ref($env->{$key}) eq "HASH") {
      script::PrintHash($env->{$key}, $prefix . $key . "}->{");
    }
    else {
      if ($env->{$key}) {print $prefix, $key, "}= \t$env->{$key}\n";}
    }
  }
}
#________________________________________________________________________________
sub find_PACKAGE {
  @packages   = ();
  &File::Find::find(\&wanted_PACKAGE, @_);
  return @packages;
}
#________________________________________________________________________________
sub wanted_PACKAGE {
#    print "wanted ",$_,"\n";
  my ($dev,$ino,$mode,$nlink,$uid,$gid) = lstat($_);
  if (! -r  _) {return;}
  if (/^\./ || 
      /^CVS$/ ||
      /^macros$/ ||
      /^html$/ ||
      /^idl$/ ||
      /^exa$/ ||
      /^doc$/ ||
      /^run$/ ||
      /^examples$/ ||
      /^images$/ ||
      /^local$/ ||
      /^hold$/ ||
      /^wrk$/)
    {$File::Find::prune = 1; return;}
  if ( /^\.\#/) {return;}
  if ( -r _ . "/PACKAGE") {
    $File::Find::prune = 1;
    my $dir = File::Basename::dirname($File::Find::name);
    $dir =~ s|\.\/||;  print "found $dir\n";
    push @packages, $dir; 
    return;
  }
}
#___________________________________________________________________________
__END__;
