* $Id: agmain.age,v 1.5 2019/10/03 22:11:16 jwebb Exp $
* $Log: agmain.age,v $
* Revision 1.5  2019/10/03 22:11:16  jwebb
* Revert back to 20MW.
*
* Revision 1.4  2019/10/01 20:32:52  jwebb
*
* Increase memory footprint of starsim, to mitigate #3395/3396.
*
* Revision 1.3  2004/03/12 22:29:45  potekhin
* Removed the call to a function that attempted to
* check the common block consistency, mainly
* because in many cases it was failing and is
* prone to be platform dependent.
*
* Revision 1.2  2004/03/01 17:26:33  fisyak
* Get rid of staf
*
* Revision 1.1.1.1  2004/01/12 23:49:38  potekhin
*
*
* Revision 1.14  2003/11/16 20:15:00  nevski
* new control feature
*
* Revision 1.13  2003/10/10 15:58:15  nevski
* set PROGRAM environment
*
* Revision 1.12  2003/08/23 15:59:04  nevski
* add bug report feature
*
* Revision 1.11  2003/04/24 08:46:02  nevski
* more paw-like feature
*
* Revision 1.10  2003/03/28 09:31:15  nevski
* paw functionality introduced, even loop reentrant
*
* Revision 1.9  2002/04/22 01:22:24  nevski
* bug fix in PROG parsing
*
* Revision 1.8  2002/02/21 01:11:49  nevski
* extend pathname in gexec command
*
* Revision 1.7  2002/02/12 02:07:12  nevski
* get rid of extension in executable name
*
* Revision 1.6  2001/06/22 16:35:41  nevski
* improve trace/debug on macros
*
#include <atlsim/config.h>
*****************************************************************************
*                                                                           *
      subroutine        AGMAIN
      call       AGINIT
      call       AGPAWQ
      call       AGEXIT
      end
*                                                                           *
*****************************************************************************
*
      subroutine        AGINIT 
#include "commons/typing.inc"
#include "geant321/gcflag.inc"
#include "geant321/gctime.inc"
*
      INTEGER           NWGEAN /20 000 000/,    NWPAW/2 000 000/
      CHARACTER*240     BATCHF,PAWLOGF,PROG,COMD,ARG,VERSION,FATCAT,DOCFILE
      INTEGER           AgIPAW,IwTYP
      COMMON /AgCIPAW/  AgIPAW,IwTYP
      CHARACTER*4096    CHARGS
      COMMON /PCARGS/   CHARGS
      INTEGER           ICSDEBUG
      COMMON /CSDEBUG/  ICSDEBUG
      Character         CDEBUG*80
      COMMON /ACDEBUG/  CDEBUG
      CHARACTER*255     CMDLIN
      COMMON /KCPARC/   CMDLIN
      LOGICAL           S/.false./,G/.false./
      COMMON/AgPROGRAM/ PROG
      INTEGER           CsADDR,GETPID,LENOCC,ICDECI,Iprin,I,J,K,L,N,LP,ier,Irc,
                        Nr/0/,Na/0/,J1,J2,J3,JE,Ilog/0/,JDEB/0/,Istaf/0/,Idot
      CHARACTER         T*1
      EXTERNAL          PAEXIT,UGLAST,AgPAWE,AgKUSER

*     ON REAL UNDERFLOW IGNORE
      Call SetEnv('PAWSUPPORT'//char(0),'nevski@cern.ch'//char(0),1)
      Call SetEnv('No_Copyright'//char(0),'yes'//char(0),1)
*
      CALL TIMEST  (3.E7)  ! set time limit for interactive mode
      CALL GETARGF(0,ARG)
      I = 1
      N = LENOCC (ARG)
*     DO J=1,N   { IF (ARG(J:J).EQ.'/') { I=J+1; }
      Idot=N+1
      do j=1,N
      { if (ARG(j:j)=='/') { i=j+1; Idot=N+1 }
        if (ARG(j:j)=='.') Idot=j
      }
      PROG    = ARG(I:Idot-1)
      LP      = LENOCC(PROG)
      Call CUTOL(PROG)
*     N=N-I+1; I=1;
*
      if (PROG=='atlsim') CALL REBANKM(-1)
      Call SetEnv('PROGRAM'//char(0),PROG(1:Lp)//char(0),1)
*
      FATCAT  = ' '
      VERSION = ' '
      do J=1,999
      {  comd=' ';  CALL GETARGF(J,comd);  Call CUTOL(comd)
         L=LENOCC(comd);       if (L<=0) Break
         if comd(1:2)=='-h'
         { print *, ' usage: '//prog(1:LP)    _
                 // ' [ -V version]'          _
                 // ' [ -w HIGZ_UNIT ]'       _
                 // ' [ -l login_kumac]'      _
                 // ' [ -b batch_kumac]'      _
                 // ' [ -c command line]'     _
                 // ' [ -D debug_level]'      _
                 // ' [ -S STAF_size(Mw)]'    _
                 // ' [ -P PAWC_size(Mw)]'    _
                 // ' [ -G GCBANK_size(Mw)]'  _
                 // ' [ -f fatmen_catalog  ]' _
                 // ' [ -n(o login_kumac)]'   _
           ; stop 'Done with help'
         }
         if comd(1:1)='-'
         { Na+=1;  Nr=1;
           Arg=comd(3:);       If (Arg==' ') CALL GETARGF(J+1,Arg);
           K  =Lenocc(arg);    If (K>0) Nr=ICDECI(arg,1,K);
           If (comd(1:2)='-v') { Version=PROG; if (LenOCC(arg)>0) VERSION=arg }
           If (comd(1:2)='-d') { JDEB=Nr; CDEBUG=Arg; ICSDEBUG=Index(Arg,'c') }
           If (comd(1:2)='-g') NWGEAN  = max(0,Nr)*1000000
           If (comd(1:2)='-p') NWPAW   = max(0,Nr)*1000000
           If (comd(1:2)='-l') ILOG    = 1
           If (comd(1:2)='-f') FATCAT  = Arg
      }  }
      IDEBUG=JDEB
      CALL CUTOL(VERSION)
      S = Prog.ne.'gstar' .and. Prog.ne.'atlsim' .and. Prog.ne.'paw'
      G = Version.ne.'staf' .and. Version.ne.'paw'
*
      write (*,1001) PROG(1:LP),NWGEAN,NWPAW,GETPID()
1001  format(1x,54('*')/' * Starting ',a8,
     >       ' NwGEANT=',i10,' NwPAW=',i8,' *'/,
     >       1x,22('*'),'pid=',i6,22('*') )
*
      IPRIN = -3
      IF (IDEBUG>2) IPRIN=-1
*                                        initialise packages
      CALL MZEBRA  (IPRIN)
      CALL GZEBRA  (NWGEAN)         ! store 0 - geant
      CALL MZPAW   (NWPAW,' ')      ! store 1 - pawc

      CALL PAWINT1 (PROG(1:LP),BATCHF,PAWLOGF)
      CALL KGETAR  (CHARGS)         ! pawint does not know the length
      if (ILOG==0) CALL AFNAME (PAWLOGF,'.logon.kumac')
      CALL PAWINT2 (0,'+?',AgPAWE,IWTYP)  ! type of PAW, HBOOK, command

* PAWINT2 calls KUINIT which unconditionally enables a useless signal handler
* that may deadlock. This disables it back, but does not however restore
* Root.ErrorHandlers
      CALL KUEXEC('/KUIP/SET_SHOW/BREAK OFF')

      CALL FMLOGL  (-3)
      IF (LENOCC(FATCAT)>0) CALL FMSTRT(62,63,%L(FATCAT),Irc)

      if (G) CALL GINTRI            ! Geant MENUs and COMMANDs
*
      IF (IWTYP.EQ.999) THEN        ! motif zebra browser
         CALL PMINIT                ! Paw-Motif
         CALL GBROWS                ! Geant Browser
         CALL KUINIM (PROG(1:LP))   ! Kuip-Motif
      ELSE
*        CALL ZBRDEF                ! zebra menu  (p.248)
      ENDIF
*
      CALL PAWINT3                  ! HIGZ,HPLOT,COMIS,SIGMA, commons
      if (G) CALL GXCS              ! declare GEANT routines to COMIS
      if (G) CALL UGINIT(PROG(1:LP))! user MENUs
      if (G) CALL GDINIT            ! Initialise Drawing pkg
      CALL TIMEL (TIMINT)

      if ( PROG!='staf' & PROG!='paw' & Iwtyp>0 _
         | Version!=' ' & Version!='staf') Call AgVERSION
      if (G) Call KUEXEC('ROOT /GEANT')
      if (S) Istaf = CsADDR('STAF_START')
      If (Istaf!=0) call CsJCAL(Istaf,0,0,0,0,0,0,0,0,0,0,0)
      IDEBUG=JDEB
      call KUEXEC('alias/create opt   option      c')
      call KUEXEC('alias/create make  gexec       c')
      call KUEXEC('alias/create title title_glob  c')
      call KUEXEC('alias/create file  f/file      c')
      call KUEXEC('alias/create call  f/call      c')
      call KUEXEC('alias/create set   gr/set      c')
      if (Istaf!=0) then
      call KUEXEC('alias/create ls    dui/ls      c')
      call KUEXEC('alias/create cd    dui/cd      c')
      call KUEXEC('alias/create more  table/print c')
      endif
*                  AGI documentation system
      if (G) then
      call agsbegd('DOCU',ier)
      call afname(docfile,'.bank')
      if (docfile != ' ') then
        open  (99,file=%L(docfile),status='OLD',err=:ND:)
        call  dzdocm (99,0,'R')
        close (99)
:nd:  endif
      call dzdire  " initialise internal dzedit "
      open (99,file='/dev/null',STATUS= 'UNKNOWN')
      endif
****>
      CALL KUEXEC('SET/PROMPT '''//PROG(1:LP)//' >''')
      j=0
      Do i=1,LENOCC(PAWLOGF)
         if (PAWLOGF(i:i)=='/') j=i-1
      enddo
      if j==0 { CALL KUEXEC('DEFAULT -AUTO') }
      else    { CALL KUEXEC('DEFAULT .,'//PAWLOGF(1:j)//' -AUTO') }
      if (G) CALL KUSER (AgKUSER)
*
      NOLOG = LENOCC(PAWLOGF).le.0
      CALL PAWINT4 (PAWLOGF)
      BATCH = LENOCC(BATCHF).gt.0
*     IF (BATCH) THEN
*        CALL PAWINT4(BATCHF)
*     ENDIF

      JE=LENOCC(Chargs)
      For (J1=INDEX(Chargs,' -'); 0<J1&J1<JE; J1=J2 )
      { J2=J1+INDEX(Chargs(J1+1:),' -b'); IF (J1==J2) J2=JE+1
        J3=J1+INDEX(Chargs(J1+1:),' -c'); IF (J1==J3) J3=JE+1
        J2=min(J2,J3);   T=Chargs(J1+2:J1+2);   Call CUTOL(T)
        cmdlin = CHARGS(J1+3:J2-1); 
        if (T=='b'|T=='c' & G) call AgKUSER
        If (T=='c')  CALL KUEXEC(  CHARGS(J1+3:J2-1) )
        If (T=='b')  CALL KUEXEC('EXEC '//CHARGS(J1+3:J2-1))
      }
* we comment out the check for the common block
* consistency, which doesn't seem to work well anyway
* (at least on some platforms)
*     Call AgCKINGver
*
*
*     Call AgPAWQ
      return
****>
      Entry AGEXIT
      if (S) Istaf = CsADDR('STAF_STOP')
      If (Istaf!=0) call CsJCAL(Istaf,0,0,0,0,0,0,0,0,0,0,0)
      WRITE(*,'(/1x,a)') 'Exiting from '//%L(PROG)
      if (G) Call UGLAST
      CALL PAEXIT
      :return:
      END


