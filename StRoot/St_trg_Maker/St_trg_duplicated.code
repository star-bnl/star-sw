void St_trg_Maker::SWITCH(SecondDstDaq)(St_dst_L0_Trigger *dst2) {
  int i;
  dst_L0_Trigger_st *tt = dst2->GetTable();
  tt->TrgToken         = SWITCH(gs)->EvtDesc.TCU1.FIFO1.TrgToken; // Jul 18 2001 A St_dst_L0_Trigger
  tt->TriggerActionWd  = SWITCH(gs)->EvtDesc.TCU1.FIFO1.TrgActionWd;
  tt->DSMInput         = SWITCH(gs)->EvtDesc.TCU2.FIFO2.DSMInput;        // Oct 2 2000
  tt->DSMAddress       = SWITCH(gs)->EvtDesc.TCU2.FIFO2.DSMAddress;      // Jul 18 2001 B St_dst_L0_Trigger
  tt->TriggerWd        = SWITCH(gs)->EvtDesc.TCU3.FIFO3.TriggerWd;
  tt->DetectorBusy     = SWITCH(gs)->EvtDesc.TCU3.FIFO3.DetectorBusy;    // Oct 2 2000
  tt->addBits          = SWITCH(gs)->EvtDesc.TCU3.FIFO3.addBits;    // Jul 18 2001 C St_dst_L0_Trigger
  for(i=0;i<32;i++) tt->CPA[i]=SWITCH(gs)->TrgSum.DSM.CPA[i];
  tt->MWC_CTB_mul      = SWITCH(gs)->TrgSum.DSM.lastDSM[2]; // Per Hank Crawford, Jan 6 2000.
  tt->MWC_CTB_dipole   = 0;
  tt->MWC_CTB_topology = 0;
  tt->MWC_CTB_moment   = 0;
}
void St_trg_Maker::SWITCH(CtbMwcDaq)(St_dst_TrgDet *dst1) { // For sim data, use output of trg_fillDst module.
  int npre,npost,pp,i,tray,slat,subsector,sector;
  dst_TrgDet_st *tt = dst1->GetTable();

  tt->bunchXing_lo=SWITCH(gs)->EvtDesc.bunchXing_lo;           /* Jan 10 2002, Jan,Akio,Ullrich */
  tt->bunchXing_hi=(SWITCH(gs)->EvtDesc.bunchXing_hi)&(0xFFFF); /* Jan 10 2002, Jan,Akio,Ullrich */
  npre=SWITCH(gs)->EvtDesc.npre;
  npost=SWITCH(gs)->EvtDesc.npost;
  tt->npre=npre;
  tt->npost=npost;
  for(pp=0;pp<1+npre+npost;pp++) {
    assert(pp<PREPOST);
    for(slat=0;slat<2;slat++) {
      for(tray=0;tray<120;tray++) {
        tt->nCtb[tray][slat][pp]=SWITCH(gs)->RAW[pp].CTB[ctbmap[tray][slat]];
        tt->timeCtb[tray][slat][pp]=0;  // May be settable in some events from the LS bit, consult Hank.
      }
    }
#if 0
    for(sector=0;sector<24;sector++) {
      for(subsector=0;subsector<4;subsector++) {
        tt->nMwc[sector][subsector][pp]=SWITCH(gs)->RAW[pp].MWC[mwcmap[sector][subsector]];
      }
    }
#endif
    for(i=0;i<16;i++) tt->ctbaux[i][pp]=SWITCH(gs)->RAW[pp].CTB[auxctbmap[i]];
#if 0
    for(i=0;i<32;i++) tt->mwcaux[i][pp]=SWITCH(gs)->RAW[pp].MWC[auxmwcmap[i]];
#endif
  }
}
Int_t St_trg_Maker::SWITCH(SanityCheck)() {
  int pp,lim;
  lim=1+SWITCH(gs)->EvtDesc.npre+SWITCH(gs)->EvtDesc.npost;
  for(pp=0;pp<lim;pp++) {
    SANITYCheck(SWITCH(gs)->RAW[pp].RawDetHeader[0] ,'R')
    SANITYCheck(SWITCH(gs)->RAW[pp].RawDetHeader[1] ,'D')
    SANITYCheck(SWITCH(gs)->RAW[pp].CTBdataHeader[0],'C')
    SANITYCheck(SWITCH(gs)->RAW[pp].CTBdataHeader[1],'T')
#if 0
    SANITYCheck(SWITCH(gs)->RAW[pp].MWCdataHeader[0],'M')
    SANITYCheck(SWITCH(gs)->RAW[pp].MWCdataHeader[1],'W')
#endif
    SANITYCheck(SWITCH(gs)->RAW[pp].EMCdataHeader[0],'E')
    SANITYCheck(SWITCH(gs)->RAW[pp].EMCdataHeader[1],'M')  
  }
  return kStOK;
}
///////////////////////////// Here begins the stuff from Jennifer Klay.  Oct 16 2001.
#ifdef LATER_THAN_YEAR_2000  // Year 2000 trgStructures.h does not have BEMC.
#define BYTESPERDSM 16  //The number of output bytes the 20 signals are packed into
typedef unsigned char byte;

int tower_map[10] = {0,1,2,3,4,5,6,7,8,9};  // Corrected per Jenn Klay in her email of Fri, 22 Feb 2002.
//int tower_map[10] = {4,3,2,1,0,9,8,7,6,5};  // Commented per Jenn Klay in her email of Fri, 22 Feb 2002.
int swapByteOrder[16] = {7,6,5,4,3,2,1,0,15,14,13,12,11,10,9,8};

//dsm_to_patch follows the numbering scheme in the offline software, since
//it fills a table that is used in offline.  The numbers correspond to the 
//numbering of the EMC Crates with respect to the Tower ID's from Jose
//Riso, which seems to count backward.  i.e. Patch 1 contains Tower 4800,
//while Patch 300 contains Tower 1.		J.L. Klay 18-Feb-2002
////////
int AA_dsm_to_patch[5] = {0,0,15,16,17};  //AuAu 2001
int pp_dsm_to_patch[7] = {0,0,15,28,16,29,17};  //pp 2001-02: (After 1-Dec-2001)
////////
//See below - timestamp check determines which one to use

void St_trg_Maker::SWITCH(Emc)(St_dst_TrgDet *dst1) {
  dst_TrgDet_st *tt = dst1->GetTable();

  int NUMDSM;

  //Check timestamp of events to decide which mapping to use
  //pp_dsm_to_patch[7] for after 01-Dec-2001, AA_dsm_to_patch[5] for before that date
  EventReader *er=fVictorPrelim->getEventReader();
  EventInfo info=er->getEventInfo();
  unsigned int UnixTime=info.UnixTime;
  struct tm *time=gmtime((time_t*) &UnixTime);
  int year=1900+time->tm_year;
  int month=1+time->tm_mon;
  int day=time->tm_mday;
  char text1[80];
  sprintf(text1,"%04d%02d%02d",year,month,day);
  unsigned int date=atoi(text1);
  if (date < 20011201) {	//Before 01-Dec-2001
    NUMDSM = 5;
  } else {
    NUMDSM = 7;
  }   
  byte dsmval[100][BYTESPERDSM];
  byte val[BYTESPERDSM];
  byte hi_tower,tower_sum;
  int i,j,k,index,nt,patch,sort;

  for (i=0; i<NUMDSM ; i++) {		//Fill dsm info, including L1 & L2
    for (j=0; j < BYTESPERDSM; j++) {
      index = (i*16) + j;
      dsmval[i][j] = SWITCH(gs)->RAW[0].BEMC[index];
//      if (SWITCH(gs)->RAW[0].BEMC[index]!=0)
//	printf("dsmval[%2d][%2d]= %2d",i,j,dsmval[i][j]);
    }
  }

  for (i=2; i<NUMDSM; i++) {  //Loop through L0 DSMs, skipping L1 and L2
    //Convert the DSM output byte ordering to EMC software ordering
    if (date < 20011201) {
      patch = AA_dsm_to_patch[i];	//AuAu run had 5 boards
    } else {
      patch = pp_dsm_to_patch[i];	//pp run had 7 boards
    }
    for (j=0; j<BYTESPERDSM; j++) {
      k = swapByteOrder[j];
      val[k] = dsmval[i][j];
    }
    nt = 0;  //tower counter withing DSM - 10 max
    //Unpack the bits into 20 signals and store in table
    for (index=0; index<5; index++) {
      k=index*3;

      hi_tower = (val[k] & 0x3f);
      tower_sum = ((val[k]>>6) & 0x3) + ((val[k+1] & 0xF)<<2);

      sort = tower_map[nt] + 10*patch;
      assert(sort>=0&&sort<300); // The limit 300 is in the idl file for dst_TrgDet.
      tt->emcHiTower[sort] = hi_tower;
      tt->emcTrigPatch[sort] = tower_sum;
      //printf("emcHiTower[%2d] = %2d, ",sort,hi_tower);
      //printf("emcTowerSum[%2d] = %2d\n",sort,tower_sum);
      nt += 1;

      hi_tower = ((val[k+1]>>4) & 0xF) + ((val[k+2] & 0x3)<<4);
      tower_sum = ((val[k+2]>>2) & 0x3F);

      sort = tower_map[nt] + 10*patch;
      assert(sort>=0&&sort<300);
      tt->emcHiTower[sort] = hi_tower;   
      tt->emcTrigPatch[sort] = tower_sum;
      nt += 1;
      //printf("emcHiTower[%2d] = %2d, ",sort,hi_tower);
      //printf("emcTowerSum[%2d] = %2d\n",sort,tower_sum);
    }
  }
}
#endif // LATER_THAN_YEAR_2000
///////////////////////////// Here ends the stuff from Jennifer Klay.  Oct 16 2001.

// comment 77y:  "action word has 9 as first hex digit and last bit lit, and trigger word
// is 0xf200" from Bill Love (email Nov 9 2001).

int St_trg_Maker::SWITCH(Daq)(St_DataSet *herb,St_dst_TrgDet *dst1,St_dst_L0_Trigger *dst2,
      St_dst_L1_Trigger *dst3,St_dst_L2_Trigger *dst4) {

  char *ptr,isLaser=0,isPhysics=0,isPulser=0,thisEventOk=0;
  fVictorPrelim=(StDAQReader*)(herb->GetObject()); assert(fVictorPrelim);
  fVictor=fVictorPrelim->getTRGReader(); assert(fVictor);
  assert(fVictor->thereIsTriggerData()); // No TRG bank in .daq file.  Perhaps a pedestal or laser run?
              // StTRGReader *St_trg_Maker::fVictor;
              // TRG_Reader  *StTRGReader::fTRGImpReader;
              // Bank_TRGD   *TRG_Reader::pBankTRGD;
  ptr=(char*)(fVictor->getData());
  assert(ptr);
  SWITCH(gs)=(SWITCH(MarilynMonroe)*)ptr;
  Int_t Iret = SWITCH(SanityCheck)();
  if (Iret !=  kStOK) {
    printf("St_trg_Maker:: Daq200x : failed full bank data header sanity.\n");
    return Iret;
  }
  if(  
       (((SWITCH(gs)->EvtDesc.TCU1.FIFO1.TrgActionWd)&0xf000)==0x9000 ) &&
       (((SWITCH(gs)->EvtDesc.TCU1.FIFO1.TrgActionWd)&0x0001)==0x0001 ) &&
       ( SWITCH(gs)->EvtDesc.TCU3.FIFO3.TriggerWd          ==0xf200 )
  ) isLaser=7; // See comment 77y above.
  if(SWITCH(gs)->EvtDesc.TCU1.FIFO1.TrgActionWd>>12==4) isPhysics=7;
  if(SWITCH(gs)->EvtDesc.TCU3.FIFO3.TriggerWd==0xf101) isPulser=7;
  if((m_Mode&1)&&isPhysics) thisEventOk=7;
  if((m_Mode&2)&&isLaser)   thisEventOk=7;
  if((m_Mode&4)&&isPulser)  thisEventOk=7;

  const char *oo="unkown";
  if(isPhysics) oo="Physics"; 
  if(isLaser)   oo="Laser"; 
  if(isPulser)  oo="Pulser";

  printf("St_trg_Maker:: Daq200x : %s event.  TrgActionWd=0x%x.  TriggerWd=0x%0x. Returning %s. m_Mode=%d.\n",
         oo,SWITCH(gs)->EvtDesc.TCU1.FIFO1.TrgActionWd,
         SWITCH(gs)->EvtDesc.TCU3.FIFO3.TriggerWd,
         thisEventOk?"kStOK":"kStErr",
         m_Mode);

  if (!thisEventOk) return kStErr; // Skip this event.

  // dumpDataToScreenAndExit();
  SWITCH(VpdDaq)(dst1);       // The function
  SWITCH(ZdcDaq)(dst1);       // St_trg_Maker::Sim
  SWITCH(CtbMwcDaq)(dst1);    // has four lines
  SWITCH(SecondDstDaq)(dst2); // which are analogous to these four.
  SWITCH(TakeCareOfL1andL2Daq)(dst3,dst4);
#ifdef LATER_THAN_YEAR_2000  // Year 2000 trgStructures.h does not have BEMC.
  SWITCH(Emc)(dst1);
#endif

  // SWITCH(dumpDataToScreenAndExit)();
  //if(m_DebugLevel > 0)
  cout << "St_trg_Maker:: Daq200x : Event has been accepted" << endl;
  return kStOK;
}


void St_trg_Maker::SWITCH(TakeCareOfL1andL2Daq)(St_dst_L1_Trigger *dst3,St_dst_L2_Trigger *dst4) {
  dst_L1_Trigger_st *tt1 = dst3->GetTable();
  dst_L2_Trigger_st *tt2 = dst4->GetTable();
  int leftSize,riteSize,comnSize;
  leftSize = sizeof(tt1->L1_result);
  assert(leftSize>4);
  memset(tt1->L1_result,0,leftSize);
  riteSize = sizeof(SWITCH(gs)->TrgSum.L1Result);
  comnSize = (leftSize<riteSize) ? leftSize:riteSize;
  memcpy(tt1->L1_result,SWITCH(gs)->TrgSum.L1Result,comnSize);

  leftSize = sizeof(tt2->L2_result);
  memset(tt2->L2_result,0,leftSize);
  riteSize = sizeof(SWITCH(gs)->TrgSum.L2Result);
  comnSize = (leftSize<riteSize) ? leftSize:riteSize;
  memcpy(tt2->L2_result,SWITCH(gs)->TrgSum.L2Result,comnSize);
  
}
void St_trg_Maker::SWITCH(VpdDaq)(St_dst_TrgDet *dst1) {
  int i;
  dst_TrgDet_st *tt = dst1->GetTable();
  for(i=0;i<48;i++) { 
    tt->adcVPD[i]=0;
    tt->timeVPD[i]=0;
  }
  tt->TimeEastVpd=0;
  tt->TimeWestVpd=0;
  tt->vertexZ=0;
}
void St_trg_Maker::SWITCH(ZdcDaq)(St_dst_TrgDet *dst1) {
  int i;
  dst_TrgDet_st *tt = dst1->GetTable();
  for(i=0;i<8;i++) tt->lastDSM[i]=SWITCH(gs)->TrgSum.DSM.lastDSM[i]; // Jul 18 2001 D   St_dst_TrgDet   This is 
                                                                     // partially redundant with St_dst_L0_Trigger.
  for(i=0;i<16;i++) { 
    tt->adcZDC[i]=SWITCH(gs)->TrgSum.DSM.ZDC[i];
    tt->tdcZDC[i]=0;
    tt->BCdata[i]=SWITCH(gs)->TrgSum.DSM.BCdata[i]; // Jul 18 2001 E     St_dst_TrgDet
  }
  tt->adcZDCEast=SWITCH(gs)->TrgSum.DSM.ZDC[13];
  tt->adcZDCWest=SWITCH(gs)->TrgSum.DSM.ZDC[10];
  tt->adcZDCsum=SWITCH(gs)->TrgSum.DSM.ZDC[13]+SWITCH(gs)->TrgSum.DSM.ZDC[10];
}
void St_trg_Maker::SWITCH(dumpDataToScreenAndExit)() {
  int i;
  char *TrgSumHeader=(char*)&(SWITCH(gs)->TrgSum.TrgSumHeader);
  char *L0SumHeader=(char*)&(SWITCH(gs)->TrgSum.L0SumHeader);
  char *L1SumHeader=(char*)&(SWITCH(gs)->TrgSum.L1SumHeader);
  char *L2SumHeader=(char*)&(SWITCH(gs)->TrgSum.L2SumHeader);
                   printf("%15s      = %d\n","TCUdataBytes",SWITCH(gs)->EvtDesc.TCUdataBytes);
                   printf("%15s      = %d\n","TCUEvtDesc",SWITCH(gs)->EvtDesc.TCUEvtDesc);
                   printf("%15s      = %d\n","TrgDataFmtVer",SWITCH(gs)->EvtDesc.TrgDataFmtVer);
                   printf("%15s      = %d\n","bunchXing_hi",SWITCH(gs)->EvtDesc.bunchXing_hi);
                   printf("%15s      = %d\n","bunchXing_lo",SWITCH(gs)->EvtDesc.bunchXing_lo);
                   printf("%15s      = %d\n","npre",SWITCH(gs)->EvtDesc.npre);
                   printf("%15s      = %d\n","npost",SWITCH(gs)->EvtDesc.npost);
                   printf("%15s      = %d\n","TrgSumBytes",SWITCH(gs)->TrgSum.TrgSumBytes);
  for(i=0;i<  2;i++) printf("%15s[%3d] = %d\n","TrgSumHeader",i,TrgSumHeader[i]);
  for(i=0;i<  2;i++) printf("%15s[%3d] = %d\n","L1Sum",i,SWITCH(gs)->TrgSum.L1Sum[i]);
  for(i=0;i<  2;i++) printf("%15s[%3d] = %d\n","L2Sum",i,SWITCH(gs)->TrgSum.L2Sum[i]);
                     printf("%15s    = %d\n","L0SumBytes",SWITCH(gs)->TrgSum.L0SumBytes);
  for(i=0;i<  2;i++) printf("%15s[%3d] = %d\n","L0SumHeader",i,L0SumHeader[i]);
                     printf("%15s      = %d\n","L1SumBytes",SWITCH(gs)->TrgSum.L1SumBytes);
  for(i=0;i<  2;i++) printf("%15s[%3d] = %d\n","L1SumHeader",i,L1SumHeader[i]);
  for(i=0;i< 32;i++) printf("%15s[%3d] = %d\n","L1Result",i,SWITCH(gs)->TrgSum.L1Result[i]);
                     printf("%15s      = %d\n","L2SumBytes",SWITCH(gs)->TrgSum.L2SumBytes);
  for(i=0;i<  2;i++) printf("%15s[%3d] = %d\n","L2SumHeader",i,L2SumHeader[i]);
  for(i=0;i< 32;i++) printf("%15s[%3d] = %d\n","L2Result",i,SWITCH(gs)->TrgSum.L2Result[i]);
                     printf("%15s      = %d\n","RawDetBytes",SWITCH(gs)->RAW[0].RawDetBytes);
  for(i=0;i<  2;i++) printf("%15s[%3d] = %d\n","RawDetHeader",i,SWITCH(gs)->RAW[0].RawDetHeader[i]);
                     printf("%15s      = %d\n","CTBdataBytes",SWITCH(gs)->RAW[0].CTBdataBytes);
  for(i=0;i<  2;i++) printf("%15s[%3d] = %d\n","CTBdataHeader",i,SWITCH(gs)->RAW[0].CTBdataHeader[i]);
#if 0
  for(i=0;i<256;i++) printf("%15s[%3d] = %d\n","CTB",i,SWITCH(gs)->RAW[0].CTB[i]);
                     printf("%15s      = %d\n","MWCdataBytes",SWITCH(gs)->RAW[0].MWCdataBytes);
  for(i=0;i<  2;i++) printf("%15s[%3d] = %d\n","MWCdataHeader",i,SWITCH(gs)->RAW[0].MWCdataHeader[i]);
  for(i=0;i<128;i++) printf("%15s[%3d] = %d\n","MWC",i,SWITCH(gs)->RAW[0].MWC[i]);
#endif
                     printf("%15s      = %d\n","EMCdataBytes",SWITCH(gs)->RAW[0].EMCdataBytes);
  for(i=0;i<  2;i++) printf("%15s[%3d] = %d\n","EMCdataHeader",i,SWITCH(gs)->RAW[0].EMCdataHeader[i]);
  exit(2);
}
